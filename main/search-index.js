var searchIndex = JSON.parse('{\
"figures":{"doc":"A math library specialized for 2d screen graphics.","t":[3,8,13,3,3,4,16,3,4,16,4,8,3,4,16,3,13,3,8,8,8,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,10,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,12,11,11,12,12,11,11,12,12,11],"n":["DisplayScale","Displayable","Extents","ExtentsRect","Figure","Pixels","Pixels","Point","Points","Points","Rect","Rectlike","Scale","Scaled","Scaled","Size","Sized","SizedRect","ToPixels","ToPoints","ToScaled","Vector","Vectorlike","abs","abs","abs","add","add","add","add","add_assign","add_assign","add_assign","add_assign","area","area","area","as_extents","as_extents","as_extents","as_extents","as_sized","as_sized","as_sized","as_sized","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","default","default","default","div","div","div_assign","eq","eq","extent","extents","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","height","height","height","height","height","height","into","into","into","into","into","into","into","into","into","into","into","into","is_zero","mul","mul","mul","mul_assign","ne","neg","neg","neg","neg","new","new","new","new","new","one","one","origin","origin","partial_cmp","partial_cmp","rem","rem_assign","signum","signum","signum","size","sized","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_pixels","to_pixels","to_pixels","to_pixels","to_point","to_point","to_point","to_point","to_points","to_points","to_points","to_points","to_scaled","to_scaled","to_scaled","to_scaled","to_size","to_size","to_size","to_size","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","to_vector","to_vector","to_vector","to_vector","try_cast","try_cast","try_cast","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","width","width","width","width","width","width","x","x","x","x","y","y","y","y","zero"],"q":["figuresd":["Scaling ratios for [<code>Scaled</code>] and [<code>Displayable</code>].","Methods for converting between display scales.","An [<code>ExtentsRect</code>].","A rectangle that uses two [<code>Point</code>]s for representation.","A value in a specific unit.","A unit representing physical pixels.","The [<code>Pixels</code>] unit type for this implementor.","A location represented by an x and y value.","A unit representing DPI-adjusted resolution configured on …","The [<code>Points</code>] unit type for this implementor.","A 2d rectangle. This type may internally be represented …","Functionalitiy that all rectangle types implement","Allows converting between <code>UnitA</code> and <code>UnitB</code> by multiplying …","A unit representing virtual pixels that are scaled on top …","The [<code>Scaled</code>] unit type for this implementor.","A measurement of space using width and height.","A [<code>SizedRect</code>].","A rectangle that uses a [<code>Point</code>] and a [<code>Size</code>] for …","Converts from [<code>Points</code>] or [<code>Scaled</code>] units to [<code>Pixels</code>].","Converts from [<code>Points</code>] or [<code>Pixels</code>] units to [<code>Points</code>].","Converts from [<code>Points</code>] or [<code>Pixels</code>] units to [<code>Scaled</code>].","A 2d measurement using x and y values.","Methods that enable converting between 2d types that have …","Returns a new instance with the absolute value of each …","Returns a new instance with the absolute value of each …","Returns a new instance with the absolute value of each …","","","","","","","","","Returns the area contained by this rectangle.","Returns the area contained by this rectangle.","Returns the area represented by this size.","Returns this rectangle converted to an [<code>ExtentsRect</code>].","","","","Returns this rectangle converted to a [<code>SizedRect</code>].","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts from <code>T</code> to <code>Output</code>.","Converts from <code>T</code> to <code>Output</code>.","Converts from <code>T</code> to <code>Output</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","The non-origin point of the rectangle.","Returns a new rect using points <code>origin</code> and <code>extent</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the inner value","Returns the scaling ratio.","Returns the height of the rectangle.","","","","Returns the","","","","","","","","","","","","","","","","","","","","","","","","Returns a new rectangle using <code>origin</code> and <code>size</code>.","Returns a new rectangle using <code>origin</code> and <code>extent</code>.","Returns a new `","Returns a new `","Returns a new `","","","The origin of the rectangle.","The origin of the rectangle.","","","","","Returns a <code>Vector</code> with the result of <code>signum()</code> called on …","Returns a <code>Vector</code> with the result of <code>signum()</code> called on …","Returns a <code>Vector</code> with the result of <code>signum()</code> called on …","The size of the rectangle.","Returns a new rect using <code>origin</code> and <code>size</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns this value after applying <code>scale</code>, if needed.","","","","Returns <code>self</code> as a <code>Point</code>.","","","","Returns this value after applying <code>scale</code>, if needed.","","","","Returns this value after applying <code>scale</code>, if needed.","","","","Returns <code>self</code> as a <code>Size</code>.","","","","","","","","","","Returns <code>self</code> as a <code>Vector</code>.","","","","Attempts to convert from <code>T</code> to <code>Output</code> using <code>NumCast</code>. …","Attempts to convert from <code>T</code> to <code>Output</code> using <code>NumCast</code>. …","Attempts to convert from <code>T</code> to <code>Output</code> using <code>NumCast</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the width of the rectangle.","","","","Returns the","","Returns the","Returns the","","","Returns the","Returns the","","",""],"i":[0,0,1,0,0,0,2,0,0,3,0,0,0,0,4,0,1,0,0,0,0,0,0,5,6,7,8,5,6,7,8,5,6,7,9,9,5,9,1,10,11,9,1,10,11,12,13,14,15,8,1,10,11,16,5,6,7,12,13,14,15,8,1,10,11,16,5,6,7,5,6,7,8,1,10,11,16,5,6,7,8,1,10,11,16,5,6,7,8,16,8,5,6,7,8,8,8,8,16,11,1,8,1,10,11,16,5,6,7,12,13,14,15,8,8,8,8,1,10,11,16,16,16,5,6,7,8,16,9,1,10,11,5,5,12,13,14,15,8,1,10,11,16,5,6,7,8,8,8,16,8,16,8,5,6,7,10,11,5,6,7,8,16,10,11,8,16,8,8,5,6,7,10,1,8,5,6,7,8,5,6,7,8,8,8,8,8,8,8,8,8,1,10,11,16,5,6,7,2,8,8,8,17,5,6,7,3,8,8,8,4,8,8,8,17,5,6,7,8,8,8,8,8,8,17,5,6,7,5,6,7,12,13,14,15,8,1,10,11,16,5,6,7,12,13,14,15,8,1,10,11,16,5,6,7,12,13,14,15,8,1,10,11,16,5,6,7,9,1,10,11,5,5,6,7,6,7,6,7,6,7,8],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["figure",3]],[[],["figure",3]],[[],["figure",3]],[[],["extentsrect",3]],[[],["extentsrect",3]],[[],["extentsrect",3]],[[]],[[],["sizedrect",3]],[[],["sizedrect",3]],[[]],[[],["sizedrect",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["numcast",8],["size",3],["copy",8]]],[[],[["point",3],["numcast",8],["copy",8]]],[[],[["vector",3],["numcast",8],["copy",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[["scale",3]],["ordering",4]],[[]],[[]],[[]],[[]],[[["scale",3]]],[[]],[[]],[[],["bool",15]],[[["scale",3]],["bool",15]],null,[[["point",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["toprimitive",8]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["figure",3]],[[],["figure",3]],[[],["figure",3]],[[],["figure",3]],[[],["figure",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[["scale",3]]],[[]],[[]],[[["scale",3]],["bool",15]],[[]],[[]],[[]],[[]],[[["point",3],["size",3]]],[[["point",3]]],[[]],[[]],[[]],[[]],[[]],null,null,[[],[["ordering",4],["option",4]]],[[["scale",3]],[["option",4],["ordering",4]]],[[]],[[]],[[],["vector",3]],[[],["vector",3]],[[],["vector",3]],null,[[["point",3],["size",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["i128",15],["option",4]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["i8",15]]],[[],[["isize",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["displayscale",3]]],[[["displayscale",3]]],[[["displayscale",3]]],[[["displayscale",3]]],[[],["point",3]],[[],["point",3]],[[],["point",3]],[[],["point",3]],[[["displayscale",3]]],[[["displayscale",3]]],[[["displayscale",3]]],[[["displayscale",3]]],[[["displayscale",3]]],[[["displayscale",3]]],[[["displayscale",3]]],[[["displayscale",3]]],[[],["size",3]],[[],["size",3]],[[],["size",3]],[[],["size",3]],[[],[["u128",15],["option",4]]],[[],[["option",4],["u16",15]]],[[],[["u32",15],["option",4]]],[[],[["option",4],["u64",15]]],[[],[["u8",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],["vector",3]],[[],["vector",3]],[[],["vector",3]],[[],["vector",3]],[[],[["option",4],["size",3]]],[[],[["point",3],["option",4]]],[[],[["vector",3],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["figure",3]],[[],["figure",3]],[[],["figure",3]],[[],["figure",3]],[[],["figure",3]],null,[[],["figure",3]],[[],["figure",3]],null,null,[[],["figure",3]],[[],["figure",3]],null,null,[[]]],"p":[[4,"Rect"],[8,"ToPixels"],[8,"ToPoints"],[8,"ToScaled"],[3,"Size"],[3,"Point"],[3,"Vector"],[3,"Figure"],[8,"Rectlike"],[3,"SizedRect"],[3,"ExtentsRect"],[4,"Points"],[4,"Pixels"],[4,"Scaled"],[3,"DisplayScale"],[3,"Scale"],[8,"Vectorlike"]]},\
"xtask":{"doc":"","t":[4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,12],"n":["Args","CodeCoverageConfig","GenerateCodeCoverageReport","augment_clap","borrow","borrow","borrow_mut","borrow_mut","clap","fmt","from","from","from_clap","from_subcommand","ignore_paths","into","into","is_subcommand","main","try_from","try_from","try_into","try_into","type_id","type_id","install_dependencies"],"q":["xtask","","","","","","","","","","","","","","","","","","","","","","","","","xtask::Args"],"d":["","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,2,1,2,1,1,1,2,1,1,1,2,2,1,1,0,2,1,2,1,2,1,3],"f":[null,null,null,[[["app",3]],["app",3]],[[]],[[]],[[]],[[]],[[],["app",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[["argmatches",3]]],[[],["option",4]],[[],[["string",3],["vec",3]]],[[]],[[]],[[],["bool",15]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[4,"Args"],[3,"CodeCoverageConfig"],[13,"GenerateCodeCoverageReport"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};